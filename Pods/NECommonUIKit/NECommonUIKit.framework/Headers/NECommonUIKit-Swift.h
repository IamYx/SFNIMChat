
#if defined(__arm64__) && __arm64__ || (__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef NECOMMONUIKIT_SWIFT_H
#define NECOMMONUIKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="NECommonUIKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@protocol BrowserToolsBarDelegate;
@class ExpandButton;
@class NSCoder;

SWIFT_CLASS("_TtC13NECommonUIKit15BrowserToolsBar")
@interface BrowserToolsBar : UIView
@property (nonatomic, weak) id <BrowserToolsBarDelegate> _Nullable delegate;
@property (nonatomic, strong) ExpandButton * _Nonnull saveButton;
@property (nonatomic, strong) ExpandButton * _Nonnull closeButton;
@property (nonatomic, strong) ExpandButton * _Nonnull photoButton;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)setupUI;
- (void)saveClick;
- (void)photoClick;
- (void)closeClick;
@end


SWIFT_PROTOCOL("_TtP13NECommonUIKit23BrowserToolsBarDelegate_")
@protocol BrowserToolsBarDelegate <NSObject>
- (void)didCloseClick;
- (void)didPhotoClick;
- (void)didSaveClick;
@end
























@class NSString;

SWIFT_CLASS("_TtC13NECommonUIKit13CopyableLabel")
@interface CopyableLabel : UILabel
@property (nonatomic, copy) NSString * _Nullable copyString;
@property (nonatomic, readonly) BOOL canBecomeFirstResponder;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)copy:(id _Nullable)sender;
- (BOOL)canPerformAction:(SEL _Nonnull)action withSender:(id _Nullable)sender SWIFT_WARN_UNUSED_RESULT;
@end

@class CAShapeLayer;
@class UIColor;
@class NSLayoutConstraint;

SWIFT_CLASS("_TtC13NECommonUIKit10CornerCell")
@interface CornerCell : UITableViewCell
@property (nonatomic, strong) CAShapeLayer * _Nonnull cornerLayer;
@property (nonatomic, strong) UIColor * _Nonnull fillColor;
@property (nonatomic) UIEdgeInsets edgeInset;
@property (nonatomic, strong) NSLayoutConstraint * _Nullable dividerLineLeftMargin;
@property (nonatomic, strong) NSLayoutConstraint * _Nullable dividerLineRightMargin;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) UIView * _Nonnull dividerLine;
@property (nonatomic) BOOL showDefaultLine;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
- (void)drawRoundedCornerWithRect:(CGRect)rect;
@end


SWIFT_CLASS("_TtC13NECommonUIKit10CornerView")
@interface CornerView : UIView
- (nonnull instancetype)initWithCorner:(UIRectCorner)corner radius:(CGFloat)radius color:(UIColor * _Nonnull)color OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@class UIEvent;

SWIFT_CLASS("_TtC13NECommonUIKit12ExpandButton")
@interface ExpandButton : UIButton
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



typedef SWIFT_ENUM(NSInteger, FileState, open) {
  FileStateFileOpen = 1,
  FileStateFileDownload = 2,
};

@class UIImageView;

SWIFT_CLASS("_TtC13NECommonUIKit13FileStateView")
@interface FileStateView : UIView
@property (nonatomic, strong) CAShapeLayer * _Nonnull circleLayer;
@property (nonatomic, strong) CAShapeLayer * _Nonnull progressLayer;
@property (nonatomic) enum FileState state;
@property (nonatomic, strong) UIImageView * _Nonnull FileOpenImage;
@property (nonatomic, strong) UIView * _Nonnull alphaBackView;
@property (nonatomic, strong) UIView * _Nonnull verticalLineLeft;
@property (nonatomic, strong) UIView * _Nonnull verticalLineRight;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)setProgress:(float)progress;
@end


SWIFT_CLASS("_TtC13NECommonUIKit21SearchSessionBaseView")
@interface SearchSessionBaseView : UITableViewHeaderFooterView
- (nonnull instancetype)initWithReuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)setupUI;
- (void)setUpTitleWithTitle:(NSString * _Nonnull)title;
@property (nonatomic, strong) UILabel * _Nonnull titleLabel;
@property (nonatomic, strong) UIView * _Nonnull bottomLine;
@end


SWIFT_CLASS("_TtC13NECommonUIKit26FunSearchSessionHeaderView")
@interface FunSearchSessionHeaderView : SearchSessionBaseView
- (void)setupUI;
- (nonnull instancetype)initWithReuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13NECommonUIKit13FunSearchView")
@interface FunSearchView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIViewController;
@class NSBundle;

/// 带导航栏的底部弹出视图
/// 待弹出的视图需要重写preferredContentSize来设置大小
SWIFT_CLASS("_TtC13NECommonUIKit23NEActionSheetController")
@interface NEActionSheetController : UINavigationController
/// 根据要弹出的视图初始化
/// \param rootViewController 待弹出视图
///
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (id _Nullable)forwardingTargetForSelector:(SEL _Null_unspecified)aSelector SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
@end

@class UITouch;
@class NELottieAnimationView;

/// Lottie comes prepacked with a two Animated Controls, <code>NEAnimatedSwitch</code> and
/// <code>NEAnimatedButton</code>. Both of these controls are built on top of <code>NEAnimatedControl</code>
/// <code>NEAnimatedControl</code> is a subclass of <code>UIControl</code> that provides an interactive
/// mechanism for controlling the visual state of an animation in response to
/// user actions.
/// The <code>NEAnimatedControl</code> will show and hide layers depending on the current
/// <code>UIControl.State</code> of the control.
/// Users of <code>AnimationControl</code> can set a Layer Name for each <code>UIControl.State</code>.
/// When the state is change the <code>AnimationControl</code> will change the visibility
/// of its layers.
/// NOTE: Do not initialize directly. This is intended to be subclassed.
SWIFT_CLASS("_TtC13NECommonUIKit17NEAnimatedControl")
@interface NEAnimatedControl : UIControl
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, getter=isSelected) BOOL selected;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
- (void)cancelTrackingWithEvent:(UIEvent * _Nullable)event;
- (void)animationDidSet;
/// The animation view in which the animation is rendered.
@property (nonatomic, readonly, strong) NELottieAnimationView * _Nonnull animationView;
/// The speed of the animation playback. Defaults to 1
@property (nonatomic) CGFloat animationSpeed;
/// Sets which Animation Layer should be visible for the given state.
- (void)setLayerWithNamed:(NSString * _Nonnull)named forState:(UIControlState)forState;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// An interactive button that plays an animation when pressed.
SWIFT_CLASS("_TtC13NECommonUIKit16NEAnimatedButton")
@interface NEAnimatedButton : NEAnimatedControl
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
/// A closure that is called when the button is pressed / clicked
@property (nonatomic, copy) void (^ _Nullable performAction)(void);
@property (nonatomic) UIAccessibilityTraits accessibilityTraits;
/// Sets the play range for the given UIControlEvent.
- (void)setPlayRangeFromProgress:(CGFloat)fromProgress toProgress:(CGFloat)toProgress event:(UIControlEvents)event;
/// Sets the play range for the given UIControlEvent.
- (void)setPlayRangeFromMarker:(NSString * _Nonnull)fromName toMarker:(NSString * _Nonnull)toName event:(UIControlEvents)event;
@end



/// An interactive switch with an ‘On’ and ‘Off’ state. When the user taps on the
/// switch the state is toggled and the appropriate animation is played.
/// Both the ‘On’ and ‘Off’ have an animation play range associated with their state.
/// Also available as a SwiftUI view (<code>NELottieSwitch</code>).
SWIFT_CLASS("_TtC13NECommonUIKit16NEAnimatedSwitch")
@interface NEAnimatedSwitch : NEAnimatedControl
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)animationDidSet;
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
/// If <code>false</code> the switch will not play the animation when changing between animations.
@property (nonatomic) BOOL animateUpdateWhenChangingAnimation;
@property (nonatomic) UIAccessibilityTraits accessibilityTraits;
/// A closure that is called when the <code>isOn</code> state is updated
@property (nonatomic, copy) void (^ _Nullable stateUpdated)(BOOL);
/// The current state of the switch.
@property (nonatomic) BOOL isOn;
/// Set the state of the switch and specify animation and haptics
- (void)setIsOn:(BOOL)isOn animated:(BOOL)animated shouldFireHaptics:(BOOL)shouldFireHaptics;
/// Sets the play range for the given state. When the switch is toggled, the animation range is played.
- (void)setProgressForStateFromProgress:(CGFloat)fromProgress toProgress:(CGFloat)toProgress forOnState:(BOOL)forOnState;
@end


/// A view that can be added to a keypath of an AnimationView
SWIFT_CLASS("_TtC13NECommonUIKit18NEAnimationSubview")
@interface NEAnimationSubview : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// <code>NEAutoToolbarBySubviews</code>
/// Creates Toolbar according to subview’s hirarchy of Textfield’s in view.
/// <code>NEAutoToolbarByTag</code>
/// Creates Toolbar according to tag property of TextField’s.
/// <code>NEAutoToolbarByPosition</code>
/// Creates Toolbar according to the y,x position of textField in it’s superview coordinate.
typedef SWIFT_ENUM(NSInteger, NEAutoToolbarManageBehaviour, open) {
  NEAutoToolbarManageBehaviourBySubviews = 0,
  NEAutoToolbarManageBehaviourByTag = 1,
  NEAutoToolbarManageBehaviourByPosition = 2,
};

@class NEInvocation;

SWIFT_CLASS("_TtC13NECommonUIKit15NEBarButtonItem") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface NEBarButtonItem : UIBarButtonItem
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/// Additional target & action to do get callback action. Note that setting custom target & selector doesn’t affect native functionality, this is just an additional target to get a callback.
/// @param target Target object.
/// @param action Target Selector.
- (void)setTarget:(id _Nullable)target action:(SEL _Nullable)action;
/// Customized Invocation to be called when button is pressed. invocation is internally created using setTarget:action: method.
@property (nonatomic, strong) NEInvocation * _Nullable invocation;
@end

@class UIImage;

/// NEBarButtonItemConfiguration for creating toolbar with bar button items
SWIFT_CLASS("_TtC13NECommonUIKit28NEBarButtonItemConfiguration") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface NEBarButtonItemConfiguration : NSObject
- (nonnull instancetype)initWithBarButtonSystemItem:(UIBarButtonSystemItem)barButtonSystemItem action:(SEL _Nonnull)action OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image action:(SEL _Nonnull)action OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title action:(SEL _Nonnull)action OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly) SEL _Nullable action;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NENavigationView;

/// UI 模块 ViewController 基类
SWIFT_CLASS("_TtC13NECommonUIKit20NEBaseViewController")
@interface NEBaseViewController : UIViewController <UIGestureRecognizerDelegate>
@property (nonatomic) CGFloat topConstant;
@property (nonatomic, strong) NSLayoutConstraint * _Nullable navigationViewHeightAnchor;
@property (nonatomic, readonly, strong) NENavigationView * _Nonnull navigationView;
@property (nonatomic, copy) NSString * _Nullable title;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLoad;
- (void)backEvent;
- (void)toSetting;
- (void)addLeftSwipeDismissGesture;
@end

@class UITableView;

SWIFT_CLASS("_TtC13NECommonUIKit25NEBaseTableViewController")
@interface NEBaseTableViewController : NEBaseViewController
@property (nonatomic, strong) UITableView * _Nonnull tableView;
- (void)viewDidLoad;
- (void)setupTable;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC13NECommonUIKit19NEBrokenNetworkView")
@interface NEBrokenNetworkView : UIView
/// 错误提示图片
@property (nonatomic, strong) UIImageView * _Nonnull errorIconView;
/// 网络错误标签
@property (nonatomic, strong) UILabel * _Nonnull contentLabel;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// An Objective-C compatible wrapper around Lottie’s Animation class.
/// Use in tandem with NECompatibleAnimationView when using Lottie in Objective-C
SWIFT_CLASS("_TtC13NECommonUIKit21NECompatibleAnimation")
@interface NECompatibleAnimation : NSObject
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name subdirectory:(NSString * _Nullable)subdirectory bundle:(NSBundle * _Nonnull)bundle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// An Objective-C compatible wrapper around Lottie’s NEAnimationKeypath
SWIFT_CLASS("_TtC13NECommonUIKit28NECompatibleAnimationKeypath")
@interface NECompatibleAnimationKeypath : NSObject
/// Creates a keypath from a dot separated string. The string is separated by “.”
- (nonnull instancetype)initWithKeypath:(NSString * _Nonnull)keypath OBJC_DESIGNATED_INITIALIZER;
/// Creates a keypath from a list of strings.
- (nonnull instancetype)initWithKeys:(NSArray<NSString *> * _Nonnull)keys OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum NECompatibleRenderingEngineOption : NSInteger;
@class NSURL;
@class NSData;
@class NECompatibleDictionaryTextProvider;
enum NECompatibleBackgroundBehavior : NSInteger;

/// An Objective-C compatible wrapper around Lottie’s NELottieAnimationView.
SWIFT_CLASS("_TtC13NECommonUIKit25NECompatibleAnimationView")
@interface NECompatibleAnimationView : UIView
/// Initializes a compatible AnimationView with a given compatible animation. Defaults to using
/// the rendering engine specified in NELottieConfiguration.shared.
- (nonnull instancetype)initWithCompatibleAnimation:(NECompatibleAnimation * _Nonnull)compatibleAnimation;
/// Initializes a compatible AnimationView with a given compatible animation and rendering engine
/// configuration.
- (nonnull instancetype)initWithCompatibleAnimation:(NECompatibleAnimation * _Nonnull)compatibleAnimation compatibleRenderingEngineOption:(enum NECompatibleRenderingEngineOption)compatibleRenderingEngineOption OBJC_DESIGNATED_INITIALIZER;
/// Initializes a compatible AnimationView with the resources asynchronously loaded from a given
/// URL. Defaults to using the rendering engine specified in NELottieConfiguration.shared.
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url;
/// Initializes a compatible AnimationView with the resources asynchronously loaded from a given
/// URL using the given rendering engine configuration.
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url compatibleRenderingEngineOption:(enum NECompatibleRenderingEngineOption)compatibleRenderingEngineOption OBJC_DESIGNATED_INITIALIZER;
/// Initializes a compatible AnimationView from a given Data object specifying the Lottie
/// animation. Defaults to using the rendering engine specified in NELottieConfiguration.shared.
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data;
/// Initializes a compatible AnimationView from a given Data object specifying the Lottie
/// animation using the given rendering engine configuration.
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data compatibleRenderingEngineOption:(enum NECompatibleRenderingEngineOption)compatibleRenderingEngineOption OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@property (nonatomic, strong) NECompatibleAnimation * _Nullable compatibleAnimation;
@property (nonatomic) CGFloat loopAnimationCount;
@property (nonatomic, strong) NECompatibleDictionaryTextProvider * _Nullable compatibleDictionaryTextProvider;
@property (nonatomic) UIViewContentMode contentMode;
@property (nonatomic) BOOL shouldRasterizeWhenIdle;
@property (nonatomic) CGFloat currentProgress;
@property (nonatomic, readonly) CGFloat duration;
@property (nonatomic) NSTimeInterval currentTime;
@property (nonatomic) CGFloat currentFrame;
@property (nonatomic, readonly) CGFloat realtimeAnimationFrame;
@property (nonatomic, readonly) CGFloat realtimeAnimationProgress;
@property (nonatomic) CGFloat animationSpeed;
@property (nonatomic) BOOL respectAnimationFrameRate;
@property (nonatomic, readonly) BOOL isAnimationPlaying;
@property (nonatomic) enum NECompatibleBackgroundBehavior backgroundMode;
- (void)play;
- (void)playWithCompletion:(void (^ _Nullable)(BOOL))completion;
/// Note: When calling this code from Objective-C, the method signature is
/// playFromProgress:toProgress:completion which drops the standard “With” naming convention.
- (void)playFromProgress:(CGFloat)fromProgress toProgress:(CGFloat)toProgress completion:(void (^ _Nullable)(BOOL))completion;
/// Note: When calling this code from Objective-C, the method signature is
/// playFromFrame:toFrame:completion which drops the standard “With” naming convention.
- (void)playFromFrame:(CGFloat)fromFrame toFrame:(CGFloat)toFrame completion:(void (^ _Nullable)(BOOL))completion;
/// Note: When calling this code from Objective-C, the method signature is
/// playFromMarker:toMarker:completion which drops the standard “With” naming convention.
- (void)playFromMarker:(NSString * _Nonnull)fromMarker toMarker:(NSString * _Nonnull)toMarker completion:(void (^ _Nullable)(BOOL))completion;
- (void)playWithMarker:(NSString * _Nonnull)marker completion:(void (^ _Nullable)(BOOL))completion;
- (void)stop;
- (void)pause;
- (void)reloadImages;
- (void)forceDisplayUpdate;
- (id _Nullable)getValueFor:(NECompatibleAnimationKeypath * _Nonnull)keypath atFrame:(CGFloat)atFrame SWIFT_WARN_UNUSED_RESULT;
- (void)logHierarchyKeypaths;
- (void)setColorValue:(UIColor * _Nonnull)color forKeypath:(NECompatibleAnimationKeypath * _Nonnull)keypath;
- (UIColor * _Nullable)getColorValueFor:(NECompatibleAnimationKeypath * _Nonnull)keypath atFrame:(CGFloat)atFrame SWIFT_WARN_UNUSED_RESULT;
- (void)addSubview:(NEAnimationSubview * _Nonnull)subview forLayerAt:(NECompatibleAnimationKeypath * _Nonnull)keypath;
- (CGRect)convertWithRect:(CGRect)rect toLayerAt:(NECompatibleAnimationKeypath * _Nullable)keypath SWIFT_WARN_UNUSED_RESULT;
- (CGPoint)convertWithPoint:(CGPoint)point toLayerAt:(NECompatibleAnimationKeypath * _Nullable)keypath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)progressTimeForMarker:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)frameTimeForMarker:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)durationFrameTimeForMarker:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
@end

/// An Objective-C compatible NEVersion of <code>NELottieBackgroundBehavior</code>.
typedef SWIFT_ENUM(NSInteger, NECompatibleBackgroundBehavior, open) {
/// Stop the animation and reset it to the beginning of its current play time. The completion block is called.
  NECompatibleBackgroundBehaviorStop = 0,
/// Pause the animation in its current state. The completion block is called.
  NECompatibleBackgroundBehaviorPause = 1,
/// Pause the animation and restart it when the application moves to the foreground.
/// The completion block is stored and called when the animation completes.
/// <ul>
///   <li>
///     This is the default when using the Main Thread rendering engine.
///   </li>
/// </ul>
  NECompatibleBackgroundBehaviorPauseAndRestore = 2,
/// Stops the animation and sets it to the end of its current play time. The completion block is called.
  NECompatibleBackgroundBehaviorForceFinish = 3,
/// The animation continues playing in the background.
/// <ul>
///   <li>
///     This is the default when using the Core Animation rendering engine.
///     Playing an animation using the Core Animation engine doesn’t come with any CPU overhead,
///     so using <code>.continuePlaying</code> avoids the need to stop and then resume the animation
///     (which does come with some CPU overhead).
///   </li>
///   <li>
///     This mode should not be used with the Main Thread rendering engine.
///   </li>
/// </ul>
  NECompatibleBackgroundBehaviorContinuePlaying = 4,
};


/// An Objective-C compatible wrapper around Lottie’s NEDictionaryTextProvider.
/// Use in tandem with NECompatibleAnimationView to supply text to NELottieAnimationView
/// when using Lottie in Objective-C.
SWIFT_CLASS("_TtC13NECommonUIKit34NECompatibleDictionaryTextProvider")
@interface NECompatibleDictionaryTextProvider : NSObject
- (nonnull instancetype)initWithValues:(NSDictionary<NSString *, NSString *> * _Nonnull)values OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An Objective-C compatible wrapper around Lottie’s NERenderingEngineOption enum. Pass in an option
/// to the NECompatibleAnimationView initializers to configure the rendering engine for the view.
typedef SWIFT_ENUM(NSInteger, NECompatibleRenderingEngineOption, open) {
/// Uses the rendering engine specified in NELottieConfiguration.shared.
  NECompatibleRenderingEngineOptionShared = 0,
/// Uses the library default rendering engine, coreAnimation.
  NECompatibleRenderingEngineOptionDefaultEngine = 1,
/// Optimizes rendering performance by using the Core Animation rendering engine for animations it
/// can render while falling back to the main thread renderer for all other animations.
  NECompatibleRenderingEngineOptionAutomatic = 2,
/// Only renders animations using the main thread rendering engine.
  NECompatibleRenderingEngineOptionMainThread = 3,
/// Only renders animations using the Core Animation rendering engine. Those animations that use
/// features not yet supported on this renderer will not be rendered.
  NECompatibleRenderingEngineOptionCoreAnimation = 4,
};


SWIFT_CLASS("_TtC13NECommonUIKit15NEConfigManager")
@interface NEConfigManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NEConfigManager * _Nonnull instance;)
+ (NEConfigManager * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
- (void)setParameterWithKey:(NSString * _Nonnull)key value:(id _Nullable)value;
- (id _Nullable)getParameterWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NECustomAlertAction;

SWIFT_CLASS("_TtC13NECommonUIKit29NECustomActionSheetController")
@interface NECustomActionSheetController : UIViewController
@property (nonatomic, strong) NECustomAlertAction * _Nonnull cancelAction;
@property (nonatomic, strong) UIView * _Nonnull boldDividerLine;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)addAction:(NECustomAlertAction * _Nonnull)action :(CGFloat)actionHeight;
@end


SWIFT_CLASS("_TtC13NECommonUIKit19NECustomAlertAction")
@interface NECustomAlertAction : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class NSAttributedString;

SWIFT_CLASS("_TtC13NECommonUIKit15NEEmptyDataView")
@interface NEEmptyDataView : UIView
@property (nonatomic, strong) NSLayoutConstraint * _Nullable widthConstraint;
@property (nonatomic, strong) NSLayoutConstraint * _Nullable heightConstraint;
/// 空占位图
@property (nonatomic, strong) UIImageView * _Nonnull emptyImageView;
- (nonnull instancetype)initWithImageName:(NSString * _Nonnull)imageName content:(NSString * _Nonnull)content frame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image content:(NSString * _Nonnull)content frame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// 设置字符串
/// \param text 字符串
///
- (void)setText:(NSString * _Nullable)text;
/// 设置富文本
/// \param att 富文本
///
- (void)setAttributedText:(NSAttributedString * _Nullable)att;
/// 设置占位图（根据图片名称，仅支持 NECommonUIKit 库中的图片）
/// \param name （NECommonUIKit 库中的）图片名称
///
- (void)setEmptyImageWithName:(NSString * _Nonnull)name;
/// 设置占位图（支持外部传递）
/// \param image 图片
///
- (void)setEmptyImageWithImage:(UIImage * _Nullable)image;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

/// <code>NEEnableModeDefault</code>
/// Pick default settings.
/// <code>NEEnableModeEnabled</code>
/// setting is enabled.
/// <code>NEEnableModeDisabled</code>
/// setting is disabled.
typedef SWIFT_ENUM(NSInteger, NEEnableMode, open) {
  NEEnableModeDefault = 0,
  NEEnableModeEnabled = 1,
  NEEnableModeDisabled = 2,
};


SWIFT_CLASS("_TtC13NECommonUIKit17NEGrowingTextView")
@interface NEGrowingTextView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@class UITextView;

@interface NEGrowingTextView (SWIFT_EXTENSION(NECommonUIKit)) <UITextViewDelegate>
/// 文本是否可以开始编辑
/// <ul>
///   <li>
///     Return 是否允许编辑
///   </li>
/// </ul>
/// \param textView 文本控件
///
- (BOOL)textViewShouldBeginEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
/// 文本是否可以结束编辑
/// <ul>
///   <li>
///     Return 是否允许结束编辑
///   </li>
/// </ul>
/// \param textView 文本控件
///
- (BOOL)textViewShouldEndEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
/// 文本开始编辑
/// \param textView 文本控件
///
- (void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
/// 文本结束编辑
/// \param textView 文本控件
///
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
/// 文本是否可以改变
/// <ul>
///   <li>
///     Return 是否可以改变
///   </li>
/// </ul>
/// \param textView 文本控件
///
/// \param range 范围
///
/// \param text 文本
///
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// 文本改变
/// \param textView 文本控件
///
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
/// 文本选择改变
/// \param textView 文本控件
///
- (void)textViewDidChangeSelection:(UITextView * _Nonnull)textView;
@end



@interface NEGrowingTextView (SWIFT_EXTENSION(NECommonUIKit))
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
- (void)layoutSubviews;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL isFirstResponder;
@end


SWIFT_PROTOCOL("_TtP13NECommonUIKit25NEGrowingTextViewDelegate_")
@protocol NEGrowingTextViewDelegate <NSObject>
@optional
/// 变高输入框是否开始编辑回调
/// \param growingTextView 输入框
///
///
/// returns:
/// 是否开始编辑
- (BOOL)growingTextViewShouldBeginEditing:(NEGrowingTextView * _Nonnull)growingTextView SWIFT_WARN_UNUSED_RESULT;
/// 变高输入框是否结束编辑回调
/// \param growingTextView 输入框
///
///
/// returns:
/// 是否结束编辑
- (BOOL)growingTextViewShouldEndEditing:(NEGrowingTextView * _Nonnull)growingTextView SWIFT_WARN_UNUSED_RESULT;
/// 变高输入框开始编辑回调
/// \param growingTextView 输入框
///
- (void)growingTextViewDidBeginEditing:(NEGrowingTextView * _Nonnull)growingTextView;
/// 变高输入框结束编辑回调
/// \param growingTextView 输入框
///
- (void)growingTextViewDidEndEditing:(NEGrowingTextView * _Nonnull)growingTextView;
/// 变高输入框文字变化回调
/// \param growingTextView 输入框
///
/// \param range 范围
///
/// \param text 文字
///
///
/// returns:
/// 是否变化
- (BOOL)growingTextView:(NEGrowingTextView * _Nonnull)growingTextView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// 变高输入框文字变化回调
/// \param growingTextView 输入框
///
- (void)growingTextViewDidChange:(NEGrowingTextView * _Nonnull)growingTextView;
/// 变高输入框文字变化回调
/// \param growingTextView 输入框
///
- (void)growingTextViewDidChangeSelection:(NEGrowingTextView * _Nonnull)growingTextView;
/// 变高输入框高度将要变化回调
/// \param growingTextView 输入框
///
/// \param height 高度
///
/// \param difference 变化值
///
- (void)growingTextView:(NEGrowingTextView * _Nonnull)growingTextView willChangeHeight:(CGFloat)height difference:(CGFloat)difference;
/// 变高输入框高度变化回调
/// \param growingTextView 输入框
///
/// \param height 高度
///
/// \param difference 变化值
///
- (void)growingTextView:(NEGrowingTextView * _Nonnull)growingTextView didChangeHeight:(CGFloat)height difference:(CGFloat)difference;
/// 变高输入框点击return回调
/// \param growingTextView 输入框
///
///
/// returns:
/// 是否执行return
- (BOOL)growingTextViewShouldReturn:(NEGrowingTextView * _Nonnull)growingTextView SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC13NECommonUIKit12NEInvocation") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface NEInvocation : NSObject
@property (nonatomic, weak) id _Nullable target;
@property (nonatomic) SEL _Nonnull action;
- (nonnull instancetype)init:(id _Nonnull)target :(SEL _Nonnull)action OBJC_DESIGNATED_INITIALIZER;
- (void)invokeFrom:(id _Nonnull)from;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum NEPreviousNextDisplayMode : NSInteger;
@class UIFont;
@class UITapGestureRecognizer;

/// Codeless drop-in universal library allows to prevent issues of keyboard sliding up and cover UITextField/UITextView. Neither need to write any code nor any setup required and much more. A generic version of KeyboardManagement. https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/KeyboardManagement/KeyboardManagement.html
SWIFT_CLASS("_TtC13NECommonUIKit17NEKeyboardManager") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface NEKeyboardManager : NSObject
/// Returns the default singleton instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NEKeyboardManager * _Nonnull shared;)
+ (NEKeyboardManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Enable/disable managing distance between keyboard and textField. Default is YES(Enabled when class loads in <code>+(void)load</code> method).
@property (nonatomic) BOOL enable;
/// To set keyboard distance from textField. can’t be less than zero. Default is 10.0.
@property (nonatomic) CGFloat keyboardDistanceFromTextField;
/// Automatic add the NEToolbar functionality. Default is YES.
@property (nonatomic) BOOL enableAutoToolbar;
/// /**
/// NEAutoToolbarBySubviews:   Creates Toolbar according to subview’s hirarchy of Textfield’s in view.
/// NEAutoToolbarByTag:        Creates Toolbar according to tag property of TextField’s.
/// NEAutoToolbarByPosition:   Creates Toolbar according to the y,x position of textField in it’s superview coordinate.
/// Default is NEAutoToolbarBySubviews.
/// */
/// AutoToolbar managing behaviour. Default is NEAutoToolbarBySubviews.
@property (nonatomic) enum NEAutoToolbarManageBehaviour toolbarManageBehaviour;
/// If YES, then uses textField’s tintColor property for NEToolbar, otherwise tint color is default. Default is NO.
@property (nonatomic) BOOL shouldToolbarUsesTextFieldTintColor;
/// This is used for toolbar.tintColor when textfield.keyboardAppearance is UIKeyboardAppearanceDefault. If shouldToolbarUsesTextFieldTintColor is YES then this property is ignored. Default is nil and uses black color.
@property (nonatomic, strong) UIColor * _Nullable toolbarTintColor;
/// This is used for toolbar.barTintColor. Default is nil.
@property (nonatomic, strong) UIColor * _Nullable toolbarBarTintColor;
/// NEPreviousNextDisplayModeDefault:      Show NextPrevious when there are more than 1 textField otherwise hide.
/// NEPreviousNextDisplayModeAlwaysHide:   Do not show NextPrevious buttons in any case.
/// NEPreviousNextDisplayModeAlwaysShow:   Always show nextPrevious buttons, if there are more than 1 textField then both buttons will be visible but will be shown as disabled.
@property (nonatomic) enum NEPreviousNextDisplayMode previousNextDisplayMode;
/// Toolbar previous/next/done button icon, If nothing is provided then check toolbarDoneBarButtonItemText to draw done button.
@property (nonatomic, strong) UIImage * _Nullable toolbarPreviousBarButtonItemImage;
@property (nonatomic, strong) UIImage * _Nullable toolbarNextBarButtonItemImage;
@property (nonatomic, strong) UIImage * _Nullable toolbarDoneBarButtonItemImage;
/// Toolbar previous/next/done button text, If nothing is provided then system default ‘UIBarButtonSystemItemDone’ will be used.
@property (nonatomic, copy) NSString * _Nullable toolbarPreviousBarButtonItemText;
@property (nonatomic, copy) NSString * _Nullable toolbarPreviousBarButtonItemAccessibilityLabel;
@property (nonatomic, copy) NSString * _Nullable toolbarNextBarButtonItemText;
@property (nonatomic, copy) NSString * _Nullable toolbarNextBarButtonItemAccessibilityLabel;
@property (nonatomic, copy) NSString * _Nullable toolbarDoneBarButtonItemText;
@property (nonatomic, copy) NSString * _Nullable toolbarDoneBarButtonItemAccessibilityLabel;
/// If YES, then it add the textField’s placeholder text on NEToolbar. Default is YES.
@property (nonatomic) BOOL shouldShowToolbarPlaceholder;
/// Placeholder NEFont. Default is nil.
@property (nonatomic, strong) UIFont * _Nullable placeholderFont;
/// Placeholder Color. Default is nil. Which means lightGray
@property (nonatomic, strong) UIColor * _Nullable placeholderColor;
/// Placeholder Button Color when it’s treated as button. Default is nil.
@property (nonatomic, strong) UIColor * _Nullable placeholderButtonColor;
/// Override the keyboardAppearance for all textField/textView. Default is NO.
@property (nonatomic) BOOL overrideKeyboardAppearance;
/// If overrideKeyboardAppearance is YES, then all the textField keyboardAppearance is set using this property.
@property (nonatomic) UIKeyboardAppearance keyboardAppearance;
/// Resigns Keyboard on touching outside of UITextField/View. Default is NO.
@property (nonatomic) BOOL shouldResignOnTouchOutside;
/// TapGesture to resign keyboard on view’s touch. It’s a readonly property and exposed only for adding/removing dependencies if your added gesture does have collision with this one
@property (nonatomic, strong) UITapGestureRecognizer * _Nonnull resignFirstResponderGesture;
/// Resigns currently first responder field.
- (BOOL)resignFirstResponder;
/// If YES, then it plays inputClick sound on next/previous/done click.
@property (nonatomic) BOOL shouldPlayInputClicks;
/// If YES, then calls ‘setNeedsLayout’ and ‘layoutIfNeeded’ on any frame update of to viewController’s view.
@property (nonatomic) BOOL layoutIfNeededOnUpdate;
/// Disable distance handling within the scope of disabled distance handling viewControllers classes. Within this scope, ‘enabled’ property is ignored. Class should be kind of UIViewController.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull disabledDistanceHandlingClasses;
/// Enable distance handling within the scope of enabled distance handling viewControllers classes. Within this scope, ‘enabled’ property is ignored. Class should be kind of UIViewController. If same Class is added in disabledDistanceHandlingClasses list, then enabledDistanceHandlingClasses will be ignored.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull enabledDistanceHandlingClasses;
/// Disable automatic toolbar creation within the scope of disabled toolbar viewControllers classes. Within this scope, ‘enableAutoToolbar’ property is ignored. Class should be kind of UIViewController.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull disabledToolbarClasses;
/// Enable automatic toolbar creation within the scope of enabled toolbar viewControllers classes. Within this scope, ‘enableAutoToolbar’ property is ignored. Class should be kind of UIViewController. If same Class is added in disabledToolbarClasses list, then enabledToolbarClasses will be ignore.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull enabledToolbarClasses;
/// Allowed subclasses of UIView to add all inner textField, this will allow to navigate between textField contains in different superview. Class should be kind of UIView.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIView)> * _Nonnull toolbarPreviousNextAllowedClasses;
/// Disabled classes to ignore ‘shouldResignOnTouchOutside’ property, Class should be kind of UIViewController.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull disabledTouchResignedClasses;
/// Enabled classes to forcefully enable ‘shouldResignOnTouchOutsite’ property. Class should be kind of UIViewController. If same Class is added in disabledTouchResignedClasses list, then enabledTouchResignedClasses will be ignored.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull enabledTouchResignedClasses;
/// if shouldResignOnTouchOutside is enabled then you can customise the behaviour to not recognise gesture touches on some specific view subclasses. Class should be kind of UIView. Default is [UIControl, UINavigationBar]
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIView)> * _Nonnull touchResignedGestureIgnoreClasses;
/// Add/Remove customised Notification for third party customised TextField/TextView. Please be aware that the Notification object must be idential to UITextField/UITextView Notification objects and customised TextField/TextView support must be idential to UITextField/UITextView.
/// @param didBeginEditingNotificationName This should be identical to UITextViewTextDidBeginEditingNotification
/// @param didEndEditingNotificationName This should be identical to UITextViewTextDidEndEditingNotification
- (void)registerTextFieldViewClass:(SWIFT_METATYPE(UIView) _Nonnull)aClass didBeginEditingNotificationName:(NSString * _Nonnull)didBeginEditingNotificationName didEndEditingNotificationName:(NSString * _Nonnull)didEndEditingNotificationName;
- (void)unregisterTextFieldViewClass:(SWIFT_METATYPE(UIView) _Nonnull)aClass didBeginEditingNotificationName:(NSString * _Nonnull)didBeginEditingNotificationName didEndEditingNotificationName:(NSString * _Nonnull)didEndEditingNotificationName;
/// <hr/>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)reloadLayoutIfNeeded;
@end


@class UIGestureRecognizer;

SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface NEKeyboardManager (SWIFT_EXTENSION(NECommonUIKit)) <UIGestureRecognizerDelegate>
/// Note: returning YES is guaranteed to allow simultaneous recognition. returning NO is not guaranteed to prevent simultaneous recognition, as the other gesture’s delegate may return YES.
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
/// To not detect touch events in a subclass of UIControl, these may have added their own selector for specific work
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface NEKeyboardManager (SWIFT_EXTENSION(NECommonUIKit))
@property (nonatomic) BOOL enableDebugging;
/// @warning Use below methods to completely enable/disable notifications registered by library internally.
/// Please keep in mind that library is totally dependent on NSNotification of UITextField, UITextField, Keyboard etc.
/// If you do unregisterAllNotifications then library will not work at all. You should only use below methods if you want to completedly disable all library functions.
/// You should use below methods at your own risk.
- (void)registerAllNotifications;
- (void)unregisterAllNotifications;
@end


SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface NEKeyboardManager (SWIFT_EXTENSION(NECommonUIKit))
/// reloadInputViews to reload toolbar buttons enable/disable state on the fly Enhancement ID #434.
- (void)reloadInputViews;
@end


SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface NEKeyboardManager (SWIFT_EXTENSION(NECommonUIKit))
/// Returns YES if can navigate to previous responder textField/textView, otherwise NO.
@property (nonatomic, readonly) BOOL canGoPrevious;
/// Returns YES if can navigate to next responder textField/textView, otherwise NO.
@property (nonatomic, readonly) BOOL canGoNext;
/// Navigate to previous responder textField/textView.
- (BOOL)goPrevious;
/// Navigate to next responder textField/textView.
- (BOOL)goNext;
@end



SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface NEKeyboardManager (SWIFT_EXTENSION(NECommonUIKit))
/// Boolean to know if keyboard is showing.
@property (nonatomic, readonly) BOOL keyboardShowing;
@end


SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface NEKeyboardManager (SWIFT_EXTENSION(NECommonUIKit))
/// moved distance to the top used to maintain distance between keyboard and textField. Most of the time this will be a positive value.
@property (nonatomic, readonly) CGFloat movedDistance;
/// Will be called then movedDistance will be changed
@property (nonatomic, copy) void (^ _Nullable movedDistanceChanged)(CGFloat);
@end

@protocol UITextFieldDelegate;

/// Manages the return key to work like next/done in a view hierarchy.
SWIFT_CLASS("_TtC13NECommonUIKit26NEKeyboardReturnKeyHandler") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface NEKeyboardReturnKeyHandler : NSObject
/// Delegate of textField/textView.
@property (nonatomic, weak) id <UITextFieldDelegate, UITextViewDelegate> _Nullable delegate;
/// Set the last textfield return key type. Default is UIReturnKeyDefault.
@property (nonatomic) UIReturnKeyType lastTextFieldReturnKeyType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Add all the textFields available in UIViewController’s view.
- (nonnull instancetype)initWithController:(UIViewController * _Nonnull)controller OBJC_DESIGNATED_INITIALIZER;
/// Should pass UITextField/UITextView intance. Assign textFieldView delegate to self, change it’s returnKeyType.
/// @param view UITextField/UITextView object to register.
- (void)addTextFieldView:(UIView * _Nonnull)view;
/// Should pass UITextField/UITextView intance. Restore it’s textFieldView delegate and it’s returnKeyType.
/// @param view UITextField/UITextView object to unregister.
- (void)removeTextFieldView:(UIView * _Nonnull)view;
/// Add all the UITextField/UITextView responderView’s.
/// @param view UIView object to register all it’s responder subviews.
- (void)addResponderFromView:(UIView * _Nonnull)view;
/// Remove all the UITextField/UITextView responderView’s.
/// @param view UIView object to unregister all it’s responder subviews.
- (void)removeResponderFromView:(UIView * _Nonnull)view;
@end

@class UITextField;

SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface NEKeyboardReturnKeyHandler (SWIFT_EXTENSION(NECommonUIKit)) <UITextFieldDelegate>
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField reason:(UITextFieldDidEndEditingReason)reason SWIFT_AVAILABILITY(ios,introduced=10.0);
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@end

@class NSTextAttachment;

SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface NEKeyboardReturnKeyHandler (SWIFT_EXTENSION(NECommonUIKit)) <UITextViewDelegate>
- (BOOL)textViewShouldBeginEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textViewShouldEndEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
- (void)textViewDidChangeSelection:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)aTextView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
- (BOOL)textView:(UITextView * _Nonnull)aTextView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
- (BOOL)textView:(UITextView * _Nonnull)aTextView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=10.0);
- (BOOL)textView:(UITextView * _Nonnull)aTextView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=10.0);
@end


/// A CALayer subclass for rendering Lottie animations.
/// <ul>
///   <li>
///     Also available as a SwiftUI view (<code>NELottieView</code>) and a UIView subclass (<code>NELottieAnimationView</code>)
///   </li>
/// </ul>
SWIFT_CLASS("_TtC13NECommonUIKit22NELottieAnimationLayer")
@interface NELottieAnimationLayer : CALayer
/// Called by CoreAnimation to create a shadow copy of this layer
/// More details: https://developer.apple.com/documentation/quartzcore/calayer/1410842-init
- (nonnull instancetype)initWithLayer:(id _Nonnull)layer SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The base view for <code>NELottieAnimationView</code> on iOS, tvOS, watchOS, and macCatalyst.
/// Enables the <code>NELottieAnimationView</code> implementation to be shared across platforms.
SWIFT_CLASS("_TtC13NECommonUIKit25NELottieAnimationViewBase")
@interface NELottieAnimationViewBase : UIView
@property (nonatomic) UIViewContentMode contentMode;
- (void)didMoveToWindow;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// A UIView subclass for rendering Lottie animations.
/// <ul>
///   <li>
///     Also available as a SwiftUI view (<code>NELottieView</code>) and a CALayer subclass (<code>NELottieAnimationLayer</code>)
///   </li>
/// </ul>
IB_DESIGNABLE
SWIFT_CLASS("_TtC13NECommonUIKit21NELottieAnimationView")
@interface NELottieAnimationView : NELottieAnimationViewBase
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end




SWIFT_CLASS("_TtC13NECommonUIKit16NENavigationView")
@interface NENavigationView : UIView
@property (nonatomic) CGFloat bottomMargin;
@property (nonatomic) CGFloat leftMargin;
@property (nonatomic) double titleBarBottomLineHeight;
@property (nonatomic, strong) NSLayoutConstraint * _Nullable backButtonWidthAnchor;
@property (nonatomic, strong) NSLayoutConstraint * _Nullable moreButtonWidthAnchor;
@property (nonatomic, strong) UIButton * _Nonnull backButton;
@property (nonatomic, strong) UILabel * _Nonnull navTitle;
@property (nonatomic, strong) UIButton * _Nonnull moreButton;
@property (nonatomic, strong) UIView * _Nonnull titleBarView;
@property (nonatomic, strong) UIView * _Nonnull titleBarBottomLine;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)setBackButtonTitle:(NSString * _Nonnull)title;
- (void)setBackButtonImage:(UIImage * _Nullable)image;
- (void)setBackButtonWidth:(CGFloat)width;
- (void)addBackButtonTargetWithTarget:(id _Nullable)target selector:(SEL _Nonnull)selector;
- (void)setMoreButtonTitle:(NSString * _Nonnull)title;
- (void)setMoreButtonImage:(UIImage * _Nullable)image;
- (void)setMoreButtonWidth:(CGFloat)width;
- (void)addMoreButtonTargetWithTarget:(id _Nullable)target selector:(SEL _Nonnull)selector;
@end


SWIFT_CLASS("_TtC13NECommonUIKit18NEOverlayFocusView")
@interface NEOverlayFocusView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


/// A NEPagingMenuViewCell object presents the content for a single menu item when that item is within the paging menu view’s visible bounds.
/// You can use this class as-is or subclass it to add additional properties and methods. The layout and presentation of cells is managed by the paging menu view.
SWIFT_CLASS("_TtC13NECommonUIKit20NEPagingMenuViewCell")
@interface NEPagingMenuViewCell : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13NECommonUIKit17NEOverlayMenuCell")
@interface NEOverlayMenuCell : NEPagingMenuViewCell
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


@class UIScrollView;
@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS("_TtC13NECommonUIKit20NEPageViewController")
@interface NEPageViewController : UIViewController
@property (nonatomic, readonly) BOOL shouldAutomaticallyForwardAppearanceMethods;
/// 当前页面的左侧页面
@property (nonatomic, readonly, strong) UIViewController * _Nullable beforeViewController;
/// 当前页面
@property (nonatomic, readonly, strong) UIViewController * _Nullable selectedViewController;
/// 内容华东区域
@property (nonatomic, readonly, strong) UIScrollView * _Nonnull scrollView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// 滑动到下一个
/// \param animated 是否有动画
///
- (void)selectNextWithAnimated:(BOOL)animated;
/// 滑动到钱一个页面
/// \param animated 是否有动画
///
- (void)selectPreviousWithAnimated:(BOOL)animated;
/// 移除所有
- (void)removeAll;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface NEPageViewController (SWIFT_EXTENSION(NECommonUIKit)) <UIScrollViewDelegate>
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)_;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)_ withVelocity:(CGPoint)_ targetContentOffset:(CGPoint * _Nonnull)_;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)_;
@end



SWIFT_CLASS("_TtC13NECommonUIKit30NEPagingBorderLayoutAttributes")
@interface NEPagingBorderLayoutAttributes : UICollectionViewLayoutAttributes
/// 拷贝方法
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// 判断是否相等
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13NECommonUIKit18NEPagingBorderView")
@interface NEPagingBorderView : UICollectionReusableView
/// 启用布局参数
/// \param layoutAttributes 布局参数
///
- (void)applyLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributes;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13NECommonUIKit12NEPagingCell")
@interface NEPagingCell : UICollectionViewCell
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13NECommonUIKit28NEPagingCellLayoutAttributes")
@interface NEPagingCellLayoutAttributes : UICollectionViewLayoutAttributes
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
/// 判断是否相同
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionViewLayoutInvalidationContext;
@class NSIndexPath;

SWIFT_CLASS("_TtC13NECommonUIKit28NEPagingCollectionViewLayout")
@interface NEPagingCollectionViewLayout : UICollectionViewLayout
/// 获取当前内容区域尺寸
@property (nonatomic, readonly) CGSize collectionViewContentSize;
/// 自定义UI
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layoutAttributesClass;)
+ (Class _Nonnull)layoutAttributesClass SWIFT_WARN_UNUSED_RESULT;
/// 是否开启单向循环
@property (nonatomic, readonly) BOOL flipsHorizontallyInOppositeLayoutDirection;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareLayout;
- (void)invalidateLayout;
/// 导航布局
- (void)invalidateLayoutWithContext:(UICollectionViewLayoutInvalidationContext * _Nonnull)context;
/// 导航内容
- (UICollectionViewLayoutInvalidationContext * _Nonnull)invalidationContextForPreferredLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)_ withOriginalAttributes:(UICollectionViewLayoutAttributes * _Nonnull)_ SWIFT_WARN_UNUSED_RESULT;
///
- (BOOL)shouldInvalidateLayoutForPreferredLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)preferredAttributes withOriginalAttributes:(UICollectionViewLayoutAttributes * _Nonnull)originalAttributes SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForDecorationViewOfKind:(NSString * _Nonnull)elementKind atIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)_ SWIFT_WARN_UNUSED_RESULT;
@end



/// A view controller that lets the user navigate between pages of content, where each page is managed by its own view controller object.
SWIFT_CLASS("_TtC13NECommonUIKit29NEPagingContentViewController")
@interface NEPagingContentViewController : UIViewController
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)didReceiveMemoryWarning;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@property (nonatomic, readonly) BOOL shouldAutomaticallyForwardAppearanceMethods;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface NEPagingContentViewController (SWIFT_EXTENSION(NECommonUIKit)) <UIScrollViewDelegate>
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewWillBeginDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
@end


SWIFT_CLASS("_TtC13NECommonUIKit33NEPagingIndicatorLayoutAttributes")
@interface NEPagingIndicatorLayoutAttributes : UICollectionViewLayoutAttributes
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13NECommonUIKit21NEPagingIndicatorView")
@interface NEPagingIndicatorView : UICollectionReusableView
- (void)applyLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributes;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13NECommonUIKit27NEPagingInvalidationContext")
@interface NEPagingInvalidationContext : UICollectionViewLayoutInvalidationContext
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// A view controller that presents menu using cells arranged in a single column.
SWIFT_CLASS("_TtC13NECommonUIKit26NEPagingMenuViewController")
@interface NEPagingMenuViewController : UIViewController
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)didReceiveMemoryWarning;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface NEPagingMenuViewController (SWIFT_EXTENSION(NECommonUIKit)) <UIScrollViewDelegate>
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
@end




SWIFT_CLASS("_TtC13NECommonUIKit17NEPagingTitleCell")
@interface NEPagingTitleCell : NEPagingCell
@property (nonatomic, getter=isSelected) BOOL selected;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)applyLayoutAttributes:(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributes;
@end


SWIFT_CLASS("_TtC13NECommonUIKit12NEPagingView")
@interface NEPagingView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UICollectionView;

SWIFT_CLASS("_TtC13NECommonUIKit22NEPagingViewController")
@interface NEPagingViewController : UIViewController <UICollectionViewDelegate>
@property (nonatomic) CGFloat menuItemSpacing;
@property (nonatomic) CGFloat menuItemLabelSpacing;
@property (nonatomic) UIEdgeInsets menuInsets;
@property (nonatomic) SWIFT_METATYPE(NEPagingCollectionViewLayout) _Nonnull menuLayoutClass;
@property (nonatomic) SWIFT_METATYPE(NEPagingIndicatorView) _Nonnull indicatorClass;
@property (nonatomic, strong) UIColor * _Nonnull indicatorColor;
@property (nonatomic) SWIFT_METATYPE(NEPagingBorderView) _Nonnull borderClass;
@property (nonatomic, strong) UIColor * _Nonnull borderColor;
@property (nonatomic) BOOL includeSafeAreaInsets;
@property (nonatomic, strong) UIFont * _Nonnull font;
@property (nonatomic, strong) UIFont * _Nonnull selectedFont;
@property (nonatomic, strong) UIColor * _Nonnull textColor;
@property (nonatomic, strong) UIColor * _Nonnull selectedTextColor;
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull selectedBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull menuBackgroundColor;
@property (nonatomic, readonly, strong) NEPagingCollectionViewLayout * _Nonnull collectionViewLayout;
@property (nonatomic, readonly, strong) UICollectionView * _Nonnull collectionView;
@property (nonatomic, readonly, strong) NEPageViewController * _Nonnull pageViewController;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)reloadMenu;
- (void)reloadData;
- (void)selectWithIndex:(NSInteger)index animated:(BOOL)animated;
- (void)loadView;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)_;
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)_;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)_ withVelocity:(CGPoint)_ targetContentOffset:(CGPoint * _Nonnull)_;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)_ willDecelerate:(BOOL)_;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)_;
- (void)scrollViewWillBeginDecelerating:(UIScrollView * _Nonnull)_;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)_;
- (void)collectionView:(UICollectionView * _Nonnull)_ didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (CGPoint)collectionView:(UICollectionView * _Nonnull)_ targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)_ didUnhighlightItemAtIndexPath:(NSIndexPath * _Nonnull)_;
- (void)collectionView:(UICollectionView * _Nonnull)_ didHighlightItemAtIndexPath:(NSIndexPath * _Nonnull)_;
- (void)collectionView:(UICollectionView * _Nonnull)_ didDeselectItemAtIndexPath:(NSIndexPath * _Nonnull)_;
- (void)collectionView:(UICollectionView * _Nonnull)_ willDisplayCell:(UICollectionViewCell * _Nonnull)_ forItemAtIndexPath:(NSIndexPath * _Nonnull)_;
- (void)collectionView:(UICollectionView * _Nonnull)_ didEndDisplayingCell:(UICollectionViewCell * _Nonnull)_ forItemAtIndexPath:(NSIndexPath * _Nonnull)_;
- (UIViewController * _Nullable)pageViewController:(NEPageViewController * _Nonnull)_ viewControllerBeforeViewController:(UIViewController * _Nonnull)_ SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)pageViewController:(NEPageViewController * _Nonnull)_ viewControllerAfterViewController:(UIViewController * _Nonnull)_ SWIFT_WARN_UNUSED_RESULT;
- (void)pageViewController:(NEPageViewController * _Nonnull)_ isScrollingFrom:(UIViewController * _Nonnull)startingViewController destinationViewController:(UIViewController * _Nullable)destinationViewController progress:(CGFloat)progress;
- (void)pageViewController:(NEPageViewController * _Nonnull)_ willStartScrollingFrom:(UIViewController * _Nonnull)startingViewController destinationViewController:(UIViewController * _Nonnull)destinationViewController;
- (void)pageViewController:(NEPageViewController * _Nonnull)_ didFinishScrollingFrom:(UIViewController * _Nonnull)startingViewController destinationViewController:(UIViewController * _Nonnull)destinationViewController transitionSuccessful:(BOOL)transitionSuccessful;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end




@interface NEPagingViewController (SWIFT_EXTENSION(NECommonUIKit))
- (void)removeContent;
@end

/// <code>NEPreviousNextDisplayModeDefault</code>
/// Show NextPrevious when there are more than 1 textField otherwise hide.
/// <code>NEPreviousNextDisplayModeAlwaysHide</code>
/// Do not show NextPrevious buttons in any case.
/// <code>NEPreviousNextDisplayModeAlwaysShow</code>
/// Always show nextPrevious buttons, if there are more than 1 textField then both buttons will be visible but will be shown as disabled.
typedef SWIFT_ENUM(NSInteger, NEPreviousNextDisplayMode, open) {
  NEPreviousNextDisplayModeDefault = 0,
  NEPreviousNextDisplayModeAlwaysHide = 1,
  NEPreviousNextDisplayModeAlwaysShow = 2,
};


SWIFT_CLASS("_TtC13NECommonUIKit18NEPreviousNextView") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface NEPreviousNextView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSTextContainer;

/// @abstract UITextView with placeholder support
SWIFT_CLASS("_TtC13NECommonUIKit10NETextView") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface NETextView : UITextView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
/// @abstract To set textView’s placeholder text color.
@property (nonatomic, strong) IBInspectable UIColor * _Nullable placeholderTextColor;
/// @abstract To set textView’s placeholder text. Default is nil.
@property (nonatomic, copy) IBInspectable NSString * _Nullable placeholder;
- (void)layoutSubviews;
@property (nonatomic, copy) NSString * _Null_unspecified text;
@property (nonatomic, strong) NSAttributedString * _Null_unspecified attributedText;
@property (nonatomic, strong) UIFont * _Nullable font;
@property (nonatomic) NSTextAlignment textAlignment;
@property (nonatomic, weak) id <UITextViewDelegate> _Nullable delegate;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


SWIFT_CLASS("_TtC13NECommonUIKit20NETitleBarButtonItem") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface NETitleBarButtonItem : NEBarButtonItem
@property (nonatomic, strong) UIFont * _Nullable titleFont;
@property (nonatomic, copy) NSString * _Nullable title;
/// titleColor to be used for displaying button text when displaying title (disabled state).
@property (nonatomic, strong) UIColor * _Nullable titleColor;
/// selectableTitleColor to be used for displaying button text when button is enabled.
@property (nonatomic, strong) UIColor * _Nullable selectableTitleColor;
/// Customized Invocation to be called on title button action. titleInvocation is internally created using setTitleTarget:action: method.
@property (nonatomic, strong) NEInvocation * _Nullable invocation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Basic style of cell
/// <ul>
///   <li>
///     center text
///   </li>
///   <li>
///     emphasize text to focus color
///   </li>
/// </ul>
SWIFT_CLASS("_TtC13NECommonUIKit24NETitleLabelMenuViewCell")
@interface NETitleLabelMenuViewCell : NEPagingMenuViewCell
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


/// @abstract   NEToolbar for NEKeyboardManager.
SWIFT_CLASS("_TtC13NECommonUIKit9NEToolbar") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface NEToolbar : UIToolbar <UIInputViewAudioFeedback>
@property (nonatomic, strong) NEBarButtonItem * _Nonnull previousBarButton;
@property (nonatomic, strong) NEBarButtonItem * _Nonnull nextBarButton;
@property (nonatomic, strong) NETitleBarButtonItem * _Nonnull titleBarButton;
@property (nonatomic, strong) NEBarButtonItem * _Nonnull doneBarButton;
@property (nonatomic, strong) NEBarButtonItem * _Nonnull fixedSpaceBarButton;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (void)layoutSubviews;
@property (nonatomic, readonly) BOOL enableInputClicksWhenVisible;
@end


/// Basic style of focus view
/// <ul>
///   <li>
///     underline height
///   </li>
///   <li>
///     underline color
///   </li>
/// </ul>
SWIFT_CLASS("_TtC13NECommonUIKit20NEUnderlineFocusView")
@interface NEUnderlineFocusView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13NECommonUIKit16NEUserHeaderView")
@interface NEUserHeaderView : UIImageView
@property (nonatomic, strong) UILabel * _Nonnull titleLabel;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)configHeadDataWithHeadUrl:(NSString * _Nullable)headUrl name:(NSString * _Nonnull)name uid:(NSString * _Nonnull)uid;
- (void)setTitle:(NSString * _Nonnull)name;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
@end



/// A view that focus menu corresponding to current page.
SWIFT_CLASS("_TtC13NECommonUIKit19PagingMenuFocusView")
@interface PagingMenuFocusView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Displays menu lists of information and supports selection and paging of the information.
SWIFT_CLASS("_TtC13NECommonUIKit14PagingMenuView")
@interface PagingMenuView : UIScrollView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)layoutSubviews;
- (void)safeAreaInsetsDidChange SWIFT_AVAILABILITY(ios,introduced=11.0);
@end


@interface PagingMenuView (SWIFT_EXTENSION(NECommonUIKit))
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end


SWIFT_CLASS("_TtC13NECommonUIKit26PhotoBrowserBigImgBackView")
@interface PhotoBrowserBigImgBackView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@class CAAnimation;

@interface PhotoBrowserBigImgBackView (SWIFT_EXTENSION(NECommonUIKit)) <CAAnimationDelegate>
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
@end


@interface PhotoBrowserBigImgBackView (SWIFT_EXTENSION(NECommonUIKit)) <UICollectionViewDataSource, UICollectionViewDelegate>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
@end



SWIFT_CLASS("_TtC13NECommonUIKit16PhotoBrowserCell")
@interface PhotoBrowserCell : UICollectionViewCell
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@interface PhotoBrowserCell (SWIFT_EXTENSION(NECommonUIKit)) <UIScrollViewDelegate>
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidEndZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view atScale:(CGFloat)scale;
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
@end


@interface PhotoBrowserCell (SWIFT_EXTENSION(NECommonUIKit)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@class ToastImageView;

SWIFT_CLASS("_TtC13NECommonUIKit22PhotoBrowserController")
@interface PhotoBrowserController : UIViewController
@property (nonatomic, strong) BrowserToolsBar * _Nonnull toolsBar;
@property (nonatomic, strong) ToastImageView * _Nonnull successView;
- (nonnull instancetype)initWithImgs:(NSArray<UIImage *> * _Nonnull)imgs img:(UIImage * _Nonnull)img OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrls:(NSArray<NSString *> * _Nonnull)urls url:(NSString * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface PhotoBrowserController (SWIFT_EXTENSION(NECommonUIKit)) <BrowserToolsBarDelegate>
- (void)didCloseClick;
- (void)didPhotoClick;
- (void)didSaveClick;
@end


SWIFT_CLASS("_TtC13NECommonUIKit22PhotoBrowserFlowLayout")
@interface PhotoBrowserFlowLayout : UICollectionViewFlowLayout
@property (nonatomic) CGPoint lastOffset;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareLayout;
@end


@interface PhotoBrowserFlowLayout (SWIFT_EXTENSION(NECommonUIKit))
/// 这个方法的返回值，就决定了collectionView停止滚动时的偏移量
- (CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset withScrollingVelocity:(CGPoint)velocity SWIFT_WARN_UNUSED_RESULT;
@end

enum PopoverType : NSInteger;
@class UIBlurEffect;

SWIFT_CLASS("_TtC13NECommonUIKit7Popover")
@interface Popover : UIView
@property (nonatomic) CGSize arrowSize;
@property (nonatomic) NSTimeInterval animationIn;
@property (nonatomic) NSTimeInterval animationOut;
@property (nonatomic) CGFloat cornerRadius;
@property (nonatomic) CGFloat sideEdge;
@property (nonatomic) enum PopoverType popoverType;
@property (nonatomic, strong) UIColor * _Nonnull blackOverlayColor;
@property (nonatomic, strong) UIBlurEffect * _Nullable overlayBlur;
@property (nonatomic, strong) UIColor * _Nonnull popoverColor;
@property (nonatomic) BOOL dismissOnBlackOverlayTap;
@property (nonatomic) BOOL showBlackOverlay;
@property (nonatomic) BOOL highlightFromView;
@property (nonatomic) CGFloat highlightCornerRadius;
@property (nonatomic) CGFloat springDamping;
@property (nonatomic) CGFloat initialSpringVelocity;
@property (nonatomic) CGFloat sideOffset;
@property (nonatomic, strong) UIColor * _Nullable borderColor;
@property (nonatomic, copy) void (^ _Nullable willShowHandler)(void);
@property (nonatomic, copy) void (^ _Nullable willDismissHandler)(void);
@property (nonatomic, copy) void (^ _Nullable didShowHandler)(void);
@property (nonatomic, copy) void (^ _Nullable didDismissHandler)(void);
@property (nonatomic, readonly, strong) UIControl * _Nonnull blackOverlay;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithShowHandler:(void (^ _Nullable)(void))showHandler dismissHandler:(void (^ _Nullable)(void))dismissHandler OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)showAsDialog:(UIView * _Nonnull)contentView;
- (void)showAsDialog:(UIView * _Nonnull)contentView inView:(UIView * _Nonnull)inView;
- (void)show:(UIView * _Nonnull)contentView fromView:(UIView * _Nonnull)fromView;
- (void)show:(UIView * _Nonnull)contentView fromView:(UIView * _Nonnull)fromView inView:(UIView * _Nonnull)inView;
- (void)show:(UIView * _Nonnull)contentView point:(CGPoint)point;
- (void)show:(UIView * _Nonnull)contentView point:(CGPoint)point inView:(UIView * _Nonnull)inView;
- (BOOL)accessibilityPerformEscape SWIFT_WARN_UNUSED_RESULT;
- (void)dismiss;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


typedef SWIFT_ENUM(NSInteger, PopoverType, open) {
  PopoverTypeUp = 0,
  PopoverTypeDown = 1,
  PopoverTypeLeft = 2,
  PopoverTypeRight = 3,
  PopoverTypeAuto = 4,
};


SWIFT_CLASS("_TtC13NECommonUIKit13RedAngleLabel")
@interface RedAngleLabel : UILabel
@property (nonatomic) UIEdgeInsets textInsets;
- (void)drawTextInRect:(CGRect)rect;
- (CGRect)textRectForBounds:(CGRect)bounds limitedToNumberOfLines:(NSInteger)numberOfLines SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC13NECommonUIKit15SearchTextField")
@interface SearchTextField : UITextField
- (CGRect)leftViewRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)placeholderRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)editingRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)textRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol TabNavigationViewDelegate;

SWIFT_CLASS("_TtC13NECommonUIKit17TabNavigationView")
@interface TabNavigationView : UIView
@property (nonatomic, weak) id <TabNavigationViewDelegate> _Nullable delegate;
@property (nonatomic) double titleBarBottomLineHeight;
@property (nonatomic, strong) UIButton * _Nonnull brandBtn;
@property (nonatomic, strong) UILabel * _Nonnull navigationTitle;
@property (nonatomic, strong) UIButton * _Nonnull searchBtn;
@property (nonatomic, strong) ExpandButton * _Nonnull addBtn;
@property (nonatomic, strong) UIView * _Nonnull titleBarView;
@property (nonatomic, strong) UIView * _Nonnull titleBarBottomLine;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)setupSubviews;
@end


@interface TabNavigationView (SWIFT_EXTENSION(NECommonUIKit))
- (void)searchBtnClickWithSender:(UIButton * _Nonnull)sender;
- (void)addBtnClickWithSender:(UIButton * _Nonnull)sender;
@end


SWIFT_PROTOCOL("_TtP13NECommonUIKit25TabNavigationViewDelegate_")
@protocol TabNavigationViewDelegate
- (void)didClickAddBtn;
- (void)searchAction;
@end


SWIFT_CLASS("_TtC13NECommonUIKit12TextBaseCell")
@interface TextBaseCell : UITableViewCell
@property (nonatomic, strong) NSLayoutConstraint * _Nullable titleLabelTopAnchor;
@property (nonatomic, strong) NSLayoutConstraint * _Nullable titleLabelCenterYAnchor;
/// 头像视图
@property (nonatomic, strong) NEUserHeaderView * _Nonnull headImageView;
@property (nonatomic, strong) UILabel * _Nonnull titleLabel;
@property (nonatomic, strong) UILabel * _Nonnull subTitleLabel;
- (void)awakeFromNib;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (void)setupSubviews;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC13NECommonUIKit14ToastImageView")
@interface ToastImageView : UIView
@property (nonatomic, strong) UIImageView * _Nonnull imageView;
@property (nonatomic, strong) UILabel * _Nonnull contentLabel;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end











SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface UIImage (SWIFT_EXTENSION(NECommonUIKit))
+ (UIImage * _Nullable)neKeyboardLeftImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)neKeyboardRightImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)neKeyboardUpImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)neKeyboardDownImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)neKeyboardPreviousImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)neKeyboardNextImage SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface UIScrollView (SWIFT_EXTENSION(NECommonUIKit))
/// If YES, then scrollview will ignore scrolling (simply not scroll it) for adjusting textfield position. Default is NO.
@property (nonatomic) BOOL neShouldIgnoreScrollingAdjustment;
/// If YES, then scrollview will ignore content inset adjustment (simply not updating it) when keyboard is shown. Default is NO.
@property (nonatomic) BOOL neShouldIgnoreContentInsetAdjustment;
/// To set customized distance from keyboard for textField/textView. Can’t be less than zero
@property (nonatomic) BOOL neShouldRestoreScrollViewContentOffset;
@end












SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface UIView (SWIFT_EXTENSION(NECommonUIKit))
/// To set customized distance from keyboard for textField/textView. Can’t be less than zero
@property (nonatomic) CGFloat neKeyboardDistanceFromTextField;
/// If shouldIgnoreSwitchingByNextPrevious is true then library will ignore this textField/textView while moving to other textField/textView using keyboard toolbar next previous buttons. Default is false
@property (nonatomic) BOOL neIgnoreSwitchingByNextPrevious;
/// Override Enable/disable managing distance between keyboard and textField behaviour for this particular textField.
@property (nonatomic) enum NEEnableMode neEnableMode;
/// Override resigns Keyboard on touching outside of UITextField/View behaviour for this particular textField.
@property (nonatomic) enum NEEnableMode neShouldResignOnTouchOutsideMode;
@end


SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface UIView (SWIFT_EXTENSION(NECommonUIKit))
/// Returns the UIViewController object that manages the receiver.
- (UIViewController * _Nullable)neViewContainingController SWIFT_WARN_UNUSED_RESULT;
/// Returns the topMost UIViewController object in hierarchy.
- (UIViewController * _Nullable)neTopMostController SWIFT_WARN_UNUSED_RESULT;
/// Returns the UIViewController object that is actually the parent of this object. Most of the time it’s the viewController object which actually contains it, but result may be different if it’s viewController is added as childViewController of another viewController.
- (UIViewController * _Nullable)neParentContainerViewController SWIFT_WARN_UNUSED_RESULT;
/// Returns the superView of provided class type.
/// @param classType class type of the object which is to be search in above hierarchy and return
/// @param belowView view object in upper hierarchy where method should stop searching and return nil
- (UIView * _Nullable)neSuperviewOfClassType:(SWIFT_METATYPE(UIView) _Nonnull)classType belowView:(UIView * _Nullable)belowView SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface UIView (SWIFT_EXTENSION(NECommonUIKit))
/// NEToolbar references for better customization control.
@property (nonatomic, readonly, strong) NEToolbar * _Nonnull neKeyboardToolbar;
/// If <code>neShouldHideToolbarPlaceholder</code> is YES, then title will not be added to the toolbar. Default to NO.
@property (nonatomic) BOOL neShouldHideToolbarPlaceholder;
/// <code>toolbarPlaceholder</code> to override default <code>placeholder</code> text when drawing text on toolbar.
@property (nonatomic, copy) NSString * _Nullable neToolbarPlaceholder;
/// <code>neDrawingToolbarPlaceholder</code> will be actual text used to draw on toolbar. This would either <code>placeholder</code> or <code>toolbarPlaceholder</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable neDrawingToolbarPlaceholder;
- (void)neAddKeyboardToolbarWithTargetWithTarget:(id _Nullable)target titleText:(NSString * _Nullable)titleText rightBarButtonConfiguration:(NEBarButtonItemConfiguration * _Nullable)rightBarButtonConfiguration previousBarButtonConfiguration:(NEBarButtonItemConfiguration * _Nullable)previousBarButtonConfiguration nextBarButtonConfiguration:(NEBarButtonItemConfiguration * _Nullable)nextBarButtonConfiguration;
- (void)neAddDoneOnKeyboardWithTarget:(id _Nullable)target action:(SEL _Nonnull)action shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)neAddDoneOnKeyboardWithTarget:(id _Nullable)target action:(SEL _Nonnull)action titleText:(NSString * _Nullable)titleText;
- (void)neAddRightButtonOnKeyboardWithImage:(UIImage * _Nonnull)image target:(id _Nullable)target action:(SEL _Nonnull)action shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)neAddRightButtonOnKeyboardWithImage:(UIImage * _Nonnull)image target:(id _Nullable)target action:(SEL _Nonnull)action titleText:(NSString * _Nullable)titleText;
- (void)neAddRightButtonOnKeyboardWithText:(NSString * _Nonnull)text target:(id _Nullable)target action:(SEL _Nonnull)action shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)neAddRightButtonOnKeyboardWithText:(NSString * _Nonnull)text target:(id _Nullable)target action:(SEL _Nonnull)action titleText:(NSString * _Nullable)titleText;
- (void)neAddCancelDoneOnKeyboardWithTarget:(id _Nullable)target cancelAction:(SEL _Nonnull)cancelAction doneAction:(SEL _Nonnull)doneAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)neAddRightLeftOnKeyboardWithTarget:(id _Nullable)target leftButtonTitle:(NSString * _Nonnull)leftButtonTitle rightButtonTitle:(NSString * _Nonnull)rightButtonTitle leftButtonAction:(SEL _Nonnull)leftButtonAction rightButtonAction:(SEL _Nonnull)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)neAddRightLeftOnKeyboardWithTarget:(id _Nullable)target leftButtonImage:(UIImage * _Nonnull)leftButtonImage rightButtonImage:(UIImage * _Nonnull)rightButtonImage leftButtonAction:(SEL _Nonnull)leftButtonAction rightButtonAction:(SEL _Nonnull)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)neAddCancelDoneOnKeyboardWithTarget:(id _Nullable)target cancelAction:(SEL _Nonnull)cancelAction doneAction:(SEL _Nonnull)doneAction titleText:(NSString * _Nullable)titleText;
- (void)neAddRightLeftOnKeyboardWithTarget:(id _Nullable)target leftButtonTitle:(NSString * _Nonnull)leftButtonTitle rightButtonTitle:(NSString * _Nonnull)rightButtonTitle leftButtonAction:(SEL _Nonnull)leftButtonAction rightButtonAction:(SEL _Nonnull)rightButtonAction titleText:(NSString * _Nullable)titleText;
- (void)neAddRightLeftOnKeyboardWithTarget:(id _Nullable)target leftButtonImage:(UIImage * _Nonnull)leftButtonImage rightButtonImage:(UIImage * _Nonnull)rightButtonImage leftButtonAction:(SEL _Nonnull)leftButtonAction rightButtonAction:(SEL _Nonnull)rightButtonAction titleText:(NSString * _Nullable)titleText;
- (void)neAddPreviousNextDoneOnKeyboardWithTarget:(id _Nullable)target previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction doneAction:(SEL _Nonnull)doneAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)neAddPreviousNextRightOnKeyboardWithTarget:(id _Nullable)target rightButtonImage:(UIImage * _Nonnull)rightButtonImage previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction rightButtonAction:(SEL _Nonnull)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)neAddPreviousNextRightOnKeyboardWithTarget:(id _Nullable)target rightButtonTitle:(NSString * _Nonnull)rightButtonTitle previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction rightButtonAction:(SEL _Nonnull)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)neAddPreviousNextDoneOnKeyboardWithTarget:(id _Nullable)target previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction doneAction:(SEL _Nonnull)doneAction titleText:(NSString * _Nullable)titleText;
- (void)neAddPreviousNextRightOnKeyboardWithTarget:(id _Nullable)target rightButtonImage:(UIImage * _Nonnull)rightButtonImage previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction rightButtonAction:(SEL _Nonnull)rightButtonAction titleText:(NSString * _Nullable)titleText;
- (void)neAddPreviousNextRightOnKeyboardWithTarget:(id _Nullable)target rightButtonTitle:(NSString * _Nonnull)rightButtonTitle previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction rightButtonAction:(SEL _Nonnull)rightButtonAction titleText:(NSString * _Nullable)titleText;
@end


SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface UIViewController (SWIFT_EXTENSION(NECommonUIKit))
/// This method is provided to override by viewController’s if the library lifts a viewController which you doesn’t want to lift . This may happen if you have implemented side menu feature in your app and the library try to lift the side menu controller. Overriding this method in side menu class to return correct controller should fix the problem.
- (UIViewController * _Nullable)neParentNEContainerViewController SWIFT_WARN_UNUSED_RESULT;
/// To set customized distance from keyboard for textField/textView. Can’t be less than zero
/// @deprecated    Due to change in core-logic of handling distance between textField and keyboard distance, this layout contraint tweak is no longer needed and things will just work out of the box regardless of constraint pinned with safeArea/layoutGuide/superview
@property (nonatomic, strong) IBOutlet NSLayoutConstraint * _Nullable neLayoutGuideConstraint SWIFT_DEPRECATED_MSG("Due to change in core-logic of handling distance between textField and keyboard distance, this layout contraint tweak is no longer needed and things will just work out of the box regardless of constraint pinned with safeArea/layoutGuide/superview.");
@end


@class VideoToolBar;

SWIFT_CLASS("_TtC13NECommonUIKit25VideoPlayerViewController")
@interface VideoPlayerViewController : UIViewController
@property (nonatomic, copy) NSURL * _Nullable videoUrl;
@property (nonatomic, strong) ExpandButton * _Nonnull playButton;
@property (nonatomic, strong) BrowserToolsBar * _Nonnull toolsBar;
@property (nonatomic, strong) ToastImageView * _Nonnull successView;
@property (nonatomic, strong) VideoToolBar * _Nonnull videoToolBar;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface VideoPlayerViewController (SWIFT_EXTENSION(NECommonUIKit)) <BrowserToolsBarDelegate, UIImagePickerControllerDelegate, UINavigationControllerDelegate>
- (void)didCloseClick;
- (void)didPhotoClick;
- (void)didSaveClick;
- (void)endPlay;
@end

typedef SWIFT_ENUM(NSInteger, VideoState, open) {
  VideoStateVideoPlay = 1,
  VideoStateVideoDownload = 2,
};


SWIFT_CLASS("_TtC13NECommonUIKit14VideoStateView")
@interface VideoStateView : UIView
@property (nonatomic) enum VideoState state;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)setProgress:(float)progress;
@end


SWIFT_CLASS("_TtC13NECommonUIKit12VideoToolBar")
@interface VideoToolBar : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
